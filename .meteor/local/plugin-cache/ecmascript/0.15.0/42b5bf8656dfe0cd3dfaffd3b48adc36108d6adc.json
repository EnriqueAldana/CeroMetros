{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/enrique/DiscoDeEnrique/2021/Proyectos/CeroMetros/imports/api/ProductionLines/ProductionLineCtl.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"imports/api/ProductionLines/ProductionLineCtl.js","filename":"/Users/enrique/DiscoDeEnrique/2021/Proyectos/CeroMetros/imports/api/ProductionLines/ProductionLineCtl.js","cloneInputAst":true,"passPerPreset":false,"envName":"development","cwd":"/Users/enrique/DiscoDeEnrique/2021/Proyectos/CeroMetros","root":"/Users/enrique/DiscoDeEnrique/2021/Proyectos/CeroMetros","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.12.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":{},"_verified":{},"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/enrique/DiscoDeEnrique/2021/Proyectos/CeroMetros/imports/api/ProductionLines/ProductionLineCtl.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/api/ProductionLines/ProductionLineCtl.js"}},"code":"let check, Match;\nmodule.link(\"meteor/check\", {\n  check(v) {\n    check = v;\n  },\n\n  Match(v) {\n    Match = v;\n  }\n\n}, 0);\nlet ResponseMessage;\nmodule.link(\"../../startup/server/utilities/ResponseMesssage\", {\n  ResponseMessage(v) {\n    ResponseMessage = v;\n  }\n\n}, 1);\nlet Permissions;\nmodule.link(\"../../startup/server/Permissions\", {\n  default(v) {\n    Permissions = v;\n  }\n\n}, 2);\nlet AuthGuard;\nmodule.link(\"../../middlewares/AuthGuard\", {\n  default(v) {\n    AuthGuard = v;\n  }\n\n}, 3);\nlet ProductionLineRepository;\nmodule.link(\"./ProductionLine\", {\n  ProductionLineRepository(v) {\n    ProductionLineRepository = v;\n  }\n\n}, 4);\nlet ProductionLinesServ;\nmodule.link(\"./ProductionLinesServ\", {\n  default(v) {\n    ProductionLinesServ = v;\n  }\n\n}, 5);\nlet WorkstationRepository;\nmodule.link(\"../Workstations/WorkStation\", {\n  WorkstationRepository(v) {\n    WorkstationRepository = v;\n  }\n\n}, 6);\nnew ValidatedMethod({\n  name: 'productionline.save',\n  mixins: [MethodHooks],\n  permissions: [Permissions.PRODUCTIONLINES.CREATE.VALUE, Permissions.PRODUCTIONLINES.UPDATE.VALUE],\n  beforeHooks: [AuthGuard.checkPermission],\n  // Aqui se verifica si los permisos de usuario son adecuados para esta accion\n  afterHooks: [],\n\n  validate(productionline) {\n    console.info('productionline', productionline);\n\n    try {\n      // Valida que la estructura del objeto user este conforme a la definicion.\n      check(productionline, {\n        _id: Match.OneOf(String, null),\n        name: String,\n        description: String,\n        workstations: [{\n          _id: Match.OneOf(String, null),\n          name: String,\n          name_full: String,\n          location: String,\n          productionline: {\n            description: String,\n            name: String,\n            _id: String\n          }\n        }]\n      });\n    } catch (exception) {\n      console.error('productionline.save', exception);\n      throw new Meteor.Error('403', 'La informacion introducida no es v√°lida.');\n    }\n\n    ProductionLinesServ.validateProductionLineName(productionline.name, productionline._id);\n  },\n\n  run(productionline) {\n    console.log('productionline.save');\n    const responseMessage = new ResponseMessage();\n\n    if (productionline._id !== null) {\n      try {\n        ProductionLineRepository.update(productionline._id, {\n          $set: {\n            name: productionline.name,\n            description: productionline.description,\n            workstations: productionline.workstations\n          }\n        });\n        console.log('Se ha actualizado la linea de produccion');\n        responseMessage.create('Se ha actualizado la linea de produccion');\n      } catch (exception) {\n        console.error('productionline.save', exception);\n        throw new Meteor.Error('500', 'Ocurri√≥ un error al actualizar la linea de produccion');\n      }\n    } else {\n      console.log('productionline: ', productionline);\n\n      try {\n        ProductionLineRepository.insert({\n          name: productionline.name,\n          description: productionline.description,\n          workstations: productionline.workstations\n        });\n        console.log('Se ha guardado la linea de produccion');\n        responseMessage.create('Se ha guardado la linea de produccion');\n      } catch (exception) {\n        console.error('productionline.save', exception);\n        throw new Meteor.Error('500', 'Ocurri√≥ un error al guardar la linea de produccion');\n      }\n    }\n\n    return responseMessage;\n  }\n\n});\nnew ValidatedMethod({\n  name: 'productionline.list',\n  mixins: [MethodHooks],\n  permissions: [Permissions.PRODUCTIONLINES.LIST.VALUE],\n  beforeHooks: [AuthGuard.checkPermission],\n  // Aqui se verifica si los permisos de usuario son adecuados para esta accion\n  afterHooks: [],\n\n  validate() {},\n\n  run() {\n    console.log('productionline.list');\n    const responseMessage = new ResponseMessage();\n\n    try {\n      const productionlines = ProductionLineRepository.find().fetch();\n      responseMessage.create('Se ha obtenido la lista de lineas de produccion', null, productionlines);\n    } catch (exception) {\n      console.error('productionline.save', exception);\n      throw new Meteor.Error('500', 'Ocurri√≥ un error al obtener las linea de produccion');\n    }\n\n    return responseMessage;\n  }\n\n});\nnew ValidatedMethod({\n  name: 'productionline.delete',\n  mixins: [MethodHooks],\n  permissions: [Permissions.PRODUCTIONLINES.DELETE.VALUE],\n  beforeHooks: [AuthGuard.checkPermission],\n  // Aqui se verifica si los permisos de usuario son adecuados para esta accion\n  afterHooks: [],\n\n  validate(_ref) {\n    let {\n      idProductionline\n    } = _ref;\n\n    try {\n      check(idProductionline, String);\n    } catch (exception) {\n      console.error('productionline.delete', exception);\n      throw new Meteor.Error('403', 'Ocurrio un error al eliminar la linea de produccion');\n    } // validar que no sea posible eliminar una linea de produccion si hay una orden de produccion ACTIVA utilizandolo.\n\n  },\n\n  run(_ref2) {\n    let {\n      idProductionline\n    } = _ref2;\n    const responseMessage = new ResponseMessage();\n\n    try {\n      ProductionLineRepository.remove(idProductionline);\n      responseMessage.create('Linea de produccion eliminada exitosamente');\n    } catch (exception) {\n      console.error('profile.delete', exception);\n      throw new Meteor.Error('500', 'Ocurrio un error al eliminar la linea de produccion');\n    }\n\n    return responseMessage;\n  }\n\n});\nnew ValidatedMethod({\n  name: 'productionline.workstations.availables.to.include',\n  mixins: [MethodHooks],\n  permissions: [Permissions.PRODUCTIONLINES.LIST.VALUE],\n  beforeHooks: [AuthGuard.checkPermission],\n\n  validate(idProductionLine) {\n    try {\n      console.info('idProductionLine', idProductionLine);\n      check('idProductionLine', String);\n    } catch (exception) {\n      console.error('productionline.workstations', exception);\n      throw new Meteor.Error('403', 'La informacion proporcionada no es correcta');\n    }\n  },\n\n  run(idProductionLine) {\n    const responseMessage = new ResponseMessage();\n\n    try {\n      let workstationsAssigned = [];\n      let workstationsIncluded = [];\n      const productionline = ProductionLineRepository.findOne({\n        '_id': idProductionLine\n      });\n\n      if (productionline) {\n        workstationsAssigned = WorkstationRepository.find({\n          'productionline._id': idProductionLine\n        }).fetch();\n        workstationsIncluded = WorkstationRepository.find({\n          '_id': {\n            $in: productionline.workstations.map(workstation => workstation._id)\n          }\n        }).fetch();\n      }\n\n      let workstationsAvailablesToInclude = [];\n      var found = false;\n\n      for (var i = 0; i < workstationsAssigned.length; i++) {\n        for (var j = 0; j < workstationsIncluded.length; j++) {\n          if (workstationsAssigned[i]._id == workstationsIncluded[j]._id) {\n            found = true;\n            break;\n          }\n        }\n\n        if (!found) {\n          workstationsAvailablesToInclude.push(workstationsAssigned[i]);\n        }\n\n        found = false;\n      } // console.info('workstationsAssigned',workstationsAssigned);\n      // console.info('workstationsIncluded',workstationsIncluded);\n      //  console.info('workstationsAvailablesToInclude', workstationsAvailablesToInclude);\n      // El tercer parametro equivaldra al objeto data en el response\n\n\n      responseMessage.create('Estaciones de trabajo asociadas a la linea de produccion disponibles para incluir', 'Estaciones disponibles para incluir en la linea de prod', workstationsAvailablesToInclude);\n    } catch (ex) {\n      console.log('workstations.listByIdProductionLine: ', ex);\n      throw new Meteor.Error('500', 'Ocurri√≥ un error al obtener la lista de estaciones de trabajo asociadas a una linea de produccion disponibles para incluir');\n    }\n\n    return responseMessage;\n  }\n\n});\n/*\n* Aqui devolver las estaciones de trabajo que esten\n* incluidas en la linea\n*/\n\nnew ValidatedMethod({\n  name: 'productionline.workstations.included',\n  mixins: [MethodHooks],\n  permissions: [Permissions.PRODUCTIONLINES.LIST.VALUE],\n  beforeHooks: [AuthGuard.checkPermission],\n\n  validate(idProductionLine) {},\n\n  run(idProductionLine) {\n    const responseMessage = new ResponseMessage();\n\n    try {\n      let workstationsIncluded = [];\n      const productionline = ProductionLineRepository.findOne({\n        '_id': idProductionLine\n      });\n\n      if (productionline) {\n        //db.getCollection('workstations').find({'_id':{$in:['gMdEx5QjaGsxwekwY', 'P2CB6iverfv7E8eGp']}})\n        workstationsIncluded = productionline.workstations; //workstationsIncluded= WorkstationRepository.find({'_id': {$in: productionline.workstations }  }).fetch();\n      } // El tercer parametro equivaldra al objeto data en el response\n\n\n      responseMessage.create('Estaciones de trabajo incluidas a la linea de produccion', 'Estaciones incluidas en la linea de prod', workstationsIncluded);\n    } catch (ex) {\n      console.log('productionline.workstations.included: ', ex);\n      throw new Meteor.Error('500', 'Ocurri√≥ un error al obtener la lista de estaciones de trabajo incluidas a una linea de produccion');\n    }\n\n    return responseMessage;\n  }\n\n});","map":{"version":3,"sources":["imports/api/ProductionLines/ProductionLineCtl.js"],"names":["check","Match","module","link","v","ResponseMessage","Permissions","default","AuthGuard","ProductionLineRepository","ProductionLinesServ","WorkstationRepository","ValidatedMethod","name","mixins","MethodHooks","permissions","PRODUCTIONLINES","CREATE","VALUE","UPDATE","beforeHooks","checkPermission","afterHooks","validate","productionline","console","info","_id","OneOf","String","description","workstations","name_full","location","exception","error","Meteor","Error","validateProductionLineName","run","log","responseMessage","update","$set","create","insert","LIST","productionlines","find","fetch","DELETE","idProductionline","remove","idProductionLine","workstationsAssigned","workstationsIncluded","findOne","$in","map","workstation","workstationsAvailablesToInclude","found","i","length","j","push","ex"],"mappings":"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","sourcesContent":["import {check, Match} from \"meteor/check\";\nimport {ResponseMessage} from \"../../startup/server/utilities/ResponseMesssage\";\nimport Permissions from \"../../startup/server/Permissions\";\nimport AuthGuard from \"../../middlewares/AuthGuard\";\nimport {ProductionLineRepository} from \"./ProductionLine\";\nimport ProductionLinesServ from \"./ProductionLinesServ\";\nimport {WorkstationRepository} from '../Workstations/WorkStation'\n\nnew ValidatedMethod({\n    name: 'productionline.save',\n    mixins: [MethodHooks],\n    permissions: [Permissions.PRODUCTIONLINES.CREATE.VALUE,Permissions.PRODUCTIONLINES.UPDATE.VALUE],\n    beforeHooks: [AuthGuard.checkPermission],  // Aqui se verifica si los permisos de usuario son adecuados para esta accion\n    afterHooks: [],\n    validate(productionline) {\n        console.info('productionline', productionline);\n        try {\n            // Valida que la estructura del objeto user este conforme a la definicion.\n            check(productionline, {\n                _id: Match.OneOf(String, null),\n                name: String,\n                description: String,\n                workstations: [\n                    {\n                        _id: Match.OneOf(String, null),\n                        name: String,\n                        name_full: String,\n                        location: String,\n                        productionline: {\n                            description : String,\n                            name : String,\n                            _id : String\n                        }\n                    }\n                ]\n            });\n        } catch (exception) {\n            console.error('productionline.save', exception);\n            throw new Meteor.Error('403', 'La informacion introducida no es v√°lida.');\n        }\n        ProductionLinesServ.validateProductionLineName(productionline.name,productionline._id);\n    \n     \n    },\n    run(productionline) {\n        console.log('productionline.save');\n        const responseMessage= new ResponseMessage();\n        if(productionline._id !==null){\n            try{\n                ProductionLineRepository.update(productionline._id,{\n                    $set:{\n                        name: productionline.name,\n                        description: productionline.description,\n                        workstations: productionline.workstations\n                    }\n                });\n\n                console.log('Se ha actualizado la linea de produccion');\n                responseMessage.create('Se ha actualizado la linea de produccion');\n            }catch (exception) {\n                console.error('productionline.save', exception);\n                throw new Meteor.Error('500', 'Ocurri√≥ un error al actualizar la linea de produccion');\n            }\n        }else{\n            console.log('productionline: ',productionline);\n            try{\n                ProductionLineRepository.insert({\n                    name: productionline.name,\n                    description: productionline.description,\n                    workstations: productionline.workstations\n                });\n                console.log('Se ha guardado la linea de produccion');\n                responseMessage.create('Se ha guardado la linea de produccion');\n            }catch (exception) {\n                console.error('productionline.save', exception);\n                throw new Meteor.Error('500', 'Ocurri√≥ un error al guardar la linea de produccion');\n            }\n        }\n        return responseMessage;\n    }\n});\n\nnew ValidatedMethod({\n    name: 'productionline.list',\n    mixins: [MethodHooks],\n    permissions: [Permissions.PRODUCTIONLINES.LIST.VALUE],\n    beforeHooks: [AuthGuard.checkPermission],  // Aqui se verifica si los permisos de usuario son adecuados para esta accion\n    afterHooks: [],\n    validate() {\n    },\n    run() {\n        console.log('productionline.list');\n        const responseMessage= new ResponseMessage();\n            try{\n            const productionlines = ProductionLineRepository.find().fetch();\n                responseMessage.create('Se ha obtenido la lista de lineas de produccion',null,productionlines);\n            }catch (exception) {\n                console.error('productionline.save', exception);\n                throw new Meteor.Error('500', 'Ocurri√≥ un error al obtener las linea de produccion');\n            }\n        \n        return responseMessage;\n    }\n});\n\nnew ValidatedMethod({\n    name: 'productionline.delete',\n    mixins: [MethodHooks],\n    permissions: [Permissions.PRODUCTIONLINES.DELETE.VALUE],\n    beforeHooks: [AuthGuard.checkPermission],  // Aqui se verifica si los permisos de usuario son adecuados para esta accion\n    afterHooks: [],\n    validate({ idProductionline }){\n        try {\n            check(idProductionline, String);\n        }catch (exception) {\n            console.error('productionline.delete', exception);\n            throw new Meteor.Error('403', 'Ocurrio un error al eliminar la linea de produccion');\n        }\n        // validar que no sea posible eliminar una linea de produccion si hay una orden de produccion ACTIVA utilizandolo.\n        \n    },\n    run({ idProductionline }){\n        const responseMessage = new ResponseMessage();\n        try {\n            ProductionLineRepository.remove(idProductionline);\n            responseMessage.create('Linea de produccion eliminada exitosamente');\n        }catch (exception) {\n            console.error('profile.delete', exception);\n            throw new Meteor.Error('500', 'Ocurrio un error al eliminar la linea de produccion');\n        }\n        return responseMessage;\n    }\n});\n\nnew ValidatedMethod({\n    name:'productionline.workstations.availables.to.include',\n    mixins: [MethodHooks],\n    permissions: [Permissions.PRODUCTIONLINES.LIST.VALUE],\n    beforeHooks: [AuthGuard.checkPermission],\n    validate(idProductionLine) {\n            try{\n                console.info('idProductionLine',idProductionLine);\n                check('idProductionLine',String);\n            }catch (exception) {\n                    console.error('productionline.workstations', exception);\n                    throw new Meteor.Error('403','La informacion proporcionada no es correcta');\n            }\n    },\n    run(idProductionLine) {\n        const responseMessage = new ResponseMessage();\n        try{\n            let workstationsAssigned= [];\n            let workstationsIncluded= [];\n            const productionline= ProductionLineRepository.findOne({'_id':idProductionLine});\n            if(productionline){\n                workstationsAssigned=  WorkstationRepository.find({'productionline._id':idProductionLine}).fetch();\n                workstationsIncluded=  WorkstationRepository.find({'_id': {$in: productionline.workstations.map(workstation => workstation._id)}}).fetch();\n            }\n            let workstationsAvailablesToInclude=[];\n            var found = false;\n            for(var i = 0; i < workstationsAssigned.length; i++) {\n                for(var j = 0; j < workstationsIncluded.length; j++){\n                    if (workstationsAssigned[i]._id == workstationsIncluded[j]._id){\n                        found =true;\n                        break;\n                    }   \n                }\n                if(!found){\n                    workstationsAvailablesToInclude.push(workstationsAssigned[i]);\n                }\n                found = false;\n            }\n            \n           // console.info('workstationsAssigned',workstationsAssigned);\n           // console.info('workstationsIncluded',workstationsIncluded);\n           //  console.info('workstationsAvailablesToInclude', workstationsAvailablesToInclude);\n            \n            // El tercer parametro equivaldra al objeto data en el response\n            responseMessage.create('Estaciones de trabajo asociadas a la linea de produccion disponibles para incluir','Estaciones disponibles para incluir en la linea de prod',workstationsAvailablesToInclude);\n        }catch(ex){\n            console.log('workstations.listByIdProductionLine: ', ex);\n            throw new Meteor.Error('500','Ocurri√≥ un error al obtener la lista de estaciones de trabajo asociadas a una linea de produccion disponibles para incluir');\n        }\n\n        return responseMessage;\n    }\n\n});\n\n/*\n* Aqui devolver las estaciones de trabajo que esten\n* incluidas en la linea\n*/\nnew ValidatedMethod({\n    name:'productionline.workstations.included',\n    mixins: [MethodHooks],\n    permissions: [Permissions.PRODUCTIONLINES.LIST.VALUE],\n    beforeHooks: [AuthGuard.checkPermission],\n    validate(idProductionLine) {\n    },\n    run(idProductionLine) {\n        const responseMessage = new ResponseMessage();\n        try{\n            let workstationsIncluded=[];\n            const productionline= ProductionLineRepository.findOne({'_id':idProductionLine});\n\n            if(productionline){\n                //db.getCollection('workstations').find({'_id':{$in:['gMdEx5QjaGsxwekwY', 'P2CB6iverfv7E8eGp']}})\n                workstationsIncluded= productionline.workstations;\n               //workstationsIncluded= WorkstationRepository.find({'_id': {$in: productionline.workstations }  }).fetch();\n            }\n           \n            // El tercer parametro equivaldra al objeto data en el response\n        \n            responseMessage.create('Estaciones de trabajo incluidas a la linea de produccion','Estaciones incluidas en la linea de prod',workstationsIncluded);\n        }catch(ex){\n            console.log('productionline.workstations.included: ', ex);\n            throw new Meteor.Error('500','Ocurri√≥ un error al obtener la lista de estaciones de trabajo incluidas a una linea de produccion');\n        }\n\n        return responseMessage;\n    }\n\n});"]},"sourceType":"module","hash":"42b5bf8656dfe0cd3dfaffd3b48adc36108d6adc"}
