Para creaar una imagen
docker-compose build
sudo docker-compose build

Para crear solo la imagen del aplicativo
docker-compose -f docker-compose_No_ssl-proxy.yml build app

Para iniciar una instancia de una imagen
docker-compose up -d  mongo
Para iniciar si que reseete la configuracion del contenedores, los volumenes se mantienen.

docker-compose up -d --no-recreate mongo 


Arerancar Mongo-express
docker run -it --rm \
    --network cerometros_cerometros-net\
    --name mongo-express \
    -p 8081:8081 \
    -e ME_CONFIG_OPTIONS_EDITORTHEME="ambiance" \
    -e ME_CONFIG_MONGODB_SERVER="mongo" \
    -e ME_CONFIG_BASICAUTH_USERNAME="admin" \
    -e ME_CONFIG_BASICAUTH_PASSWORD="pass" \
    -e ME_CONFIG_MONGODB_ADMINUSERNAME: "root" \
    -e ME_CONFIG_MONGODB_ADMINPASSWORD: "CeroM3tros"
    mongo-express

ME_CONFIG_MONGODB_URL: "mongodb://root:CeroM3tros@localhost:27017/admin"
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: CeroM3tros
Para eliminar una imagen
docker image rm cerometros-web


Para acceder dentro de una imagen con SSH

docker exec -ti nombre_imagen bash

Para listar imagenes
docker images

Para ejecutar un COMPOUSE
docker-compose up -d nombre_imagen

Para Listar Imegenes corriendo
docker ps


CONSTRUIR SOLO UNA IMAGEN DEL DOCKER_COMPOSE que requiere permisos de administrador

sudo docker-compose build crontab


Eliminar imagenes huerfanas, ejecutar ambas instrucciones.
docker rmi $(docker images -f dangling=true -q)
docker rm $(docker ps -f status=exited -q)


Eliminar todos los contenedores detenidos

docker system prune

Eliminar todas las imágenes

docker rmi $(docker images -a -q)

Listar los volumenes

docker volume ls 

Eliminar todos los volumenes

docker volume prune

Construir las imagenes definidas en la orquestación

docker-compose -f stack-billing.yml build

Inicializar los contenedores de los servicios de la orquestación

docker-compose -f stack-billing.yml up -d

Detener todos los servicios de la orquestación

docker-compose -f stack-billing.yml stop

Escalar un servicio al iniciar la orquestación

docker-compose -f stack-billing.yml up --scale  billingapp-front=3 -d --force-recreate
Detener todos los contenedores

docker stop $(docker ps -a -q)

Listar las redes virtuales

docker network ls

Eliminar las redes virtuales

docker network prune

reconstruir las imagenes

docker-compose -f stack-billing.yml build --no-cache

reconstruir los contenedores d ela orquestación

docker-compose -f stack-billing.yml up -d --force-recreate


Correr mongo express Web sobre la imagen



mongodb://[username:password@]host1[:port1][,...hostN[:portN]][/[defaultauthdb][?options]]



Acceder a Kafka desde dentro y fuera del contenedores

Producer and consumer using external client

These clients, from the host, will use localhost to connect to Apache Kafka.

kafka-console-producer.sh --broker-list 127.0.0.1:9093 --topic test
kafka-console-consumer.sh --bootstrap-server 127.0.0.1:9093 --topic test --from-beginning


Producer and consumer using internal client

These clients, from other containers on the same Docker network, will use the kafka container service hostname to connect to Apache Kafka.

kafka-console-producer.sh --broker-list kafka:9092 --topic test
kafka-console-consumer.sh --bootstrap-server kafka:9092 --topic test --from-beginning
Similarly, application code will need to use bootstrap.servers=kafka:9092
